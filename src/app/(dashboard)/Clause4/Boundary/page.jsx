'use client'
import { useState, useEffect } from 'react'
import {
  Button,
  TextField,
  Select,
  MenuItem,
  InputLabel,
  FormControl,
  Grid,
  IconButton,
  Box,
  Typography
} from '@mui/material'
import AddCircleOutline from '@mui/icons-material/AddCircleOutline'
import RemoveCircleOutline from '@mui/icons-material/RemoveCircleOutline'

export default function BoundaryManagement() {
  const [soaOptions, setSoaOptions] = useState([])
  const [boundary, setBoundary] = useState({
    inclusions: [],
    exclusions: [],
    besidesSOA: ''
  })

  useEffect(() => {
    fetchSoaOptions()
    fetchBoundaries()
  }, [])

  useEffect(() => {
    console.log('Updated SOA Options:', soaOptions)
    console.log('Updated Boundary:', boundary)
  }, [soaOptions, boundary])

  const fetchSoaOptions = async () => {
    try {
      const response = await fetch('http://192.168.0.119:3000/api/settings/soa')
      const result = await response.json()

      console.log('Updated SOA Options:', result.data)

      if (result.data && result.data.length > 0) {
        setSoaOptions(result.data)
      } else {
        console.warn('SOA Options API returned empty data.')
        setSoaOptions([])
      }
    } catch (error) {
      console.error('Error fetching SOA Options:', error)
    }
  }

  const fetchBoundaries = async () => {
    try {
      const response = await fetch('http://192.168.0.119:3000/api/4COTO/boundary/')
      const result = await response.json()

      console.log('üì• Fetched Boundary Data:', JSON.stringify(result, null, 2))

      if (result && Array.isArray(result) && result.length > 0) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        const boundaryData = result[0]

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• inclusions ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        const inclusions = boundaryData.inclusions || []
        const formattedInclusions = Array.isArray(inclusions)
          ? inclusions.map(inc => {
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ inc ‡∏°‡∏µ _doc ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
              const incData = inc._doc || inc
              return {
                soa: incData.soa || '',
                description: incData.description || ''
              }
            })
          : []

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• exclusions ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        const exclusions = boundaryData.exclusions || []
        const formattedExclusions = Array.isArray(exclusions)
          ? exclusions.map(exc => {
              const excData = exc._doc || exc
              return {
                soa: excData.soa || '',
                description: excData.description || ''
              }
            })
          : []

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        setBoundary({
          _id: boundaryData._id || undefined,
          inclusions: formattedInclusions,
          exclusions: formattedExclusions,
          besidesSOA: boundaryData.besidesSOA || ''
        })

        console.log('Formatted boundary data:', {
          _id: boundaryData._id,
          inclusions: formattedInclusions,
          exclusions: formattedExclusions,
          besidesSOA: boundaryData.besidesSOA
        })
      } else {
        console.warn('Boundary API returned empty data.')
        setBoundary({
          _id: undefined,
          inclusions: [],
          exclusions: [],
          besidesSOA: ''
        })
      }
    } catch (error) {
      console.error('Error fetching Boundary:', error)
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error
      setBoundary({
        _id: undefined,
        inclusions: [],
        exclusions: [],
        besidesSOA: ''
      })
    }
  }

  // ‚úÖ Handle Change
  const handleChange = (field, value, index = null, type = null) => {
    if (type) {
      setBoundary(prev => ({
        ...prev,
        [type]: prev[type].map((item, i) => (i === index ? { ...item, [field]: value } : item))
      }))
    } else {
      setBoundary(prev => ({ ...prev, [field]: value }))
    }
  }

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Inclusion / Exclusion
  const handleAdd = type => {
    setBoundary(prev => ({
      ...prev,
      [type]: [...prev[type], { soa: soaOptions.length > 0 ? soaOptions[0].soaId : '', description: '' }]
    }))
  }

  // ‚úÖ ‡∏•‡∏ö Inclusion / Exclusion
  const handleRemove = async (type, index) => {
    setBoundary(prev => {
      const updatedList = prev[type].filter((_, i) => i !== index)
      return { ...prev, [type]: updatedList }
    })

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    try {
      const updatedBoundary = {
        ...boundary,
        [type]: boundary[type].filter((_, i) => i !== index) // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å
      }

      const response = await fetch('http://192.168.0.119:3000/api/4COTO/boundary/save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updatedBoundary)
      })

      const result = await response.json()
      console.log('Updated after remove:', result)
      alert('‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß!')
      fetchBoundaries() // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
    } catch (error) {
      console.error('Error removing boundary:', error)
    }
  }

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Boundary
  const handleSave = async () => {
    try {
      const response = await fetch('http://192.168.0.119:3000/api/4COTO/boundary/save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(boundary)
      })
      const result = await response.json()
      console.log('Saved:', result)
      alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')

      await fetchBoundaries()
    } catch (error) {
      console.error('Error saving boundary:', error)
    }
  }

  return (
    <Box className='p-10 max-w-4xl mx-auto bg-white rounded-lg shadow-lg'>
      <Typography variant='h5' className='text-center font-bold'>
        Boundary Management
      </Typography>

      {/* üîπ Inclusions */}
      <Typography variant='h6' className='mt-6'>
        SOA ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (Inclusions)
      </Typography>
      {boundary.inclusions.map((inc, index) => (
        <Grid container spacing={2} key={index} alignItems='center' className='mt-2'>
          <Grid item xs={5}>
            <FormControl fullWidth>
              <InputLabel>SOA</InputLabel>
              <Select
                value={soaOptions.find(soa => soa.soaId === inc.soa) ? inc.soa : ''}
                onChange={e => handleChange('soa', e.target.value, index, 'inclusions')}
              >
                {soaOptions.map(soa => (
                  <MenuItem key={soa.soaId} value={soa.soaId}>
                    {soa.controlId} {soa.controlName}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={5}>
            <TextField
              fullWidth
              label='‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ'
              value={inc.description || ''}
              onChange={e => handleChange('description', e.target.value, index, 'inclusions')}
            />
          </Grid>
          <Grid item xs={2}>
            <IconButton
              onClick={() => {
                console.log('Removing inclusions at index:', index)
                handleRemove('inclusions', index)
              }}
              color='error'
            >
              <RemoveCircleOutline />
            </IconButton>
          </Grid>
        </Grid>
      ))}
      <Button startIcon={<AddCircleOutline />} onClick={() => handleAdd('inclusions')} className='mt-2'>
        ‡πÄ‡∏û‡∏¥‡πà‡∏° Inclusion
      </Button>

      {/* üîπ Exclusions */}
      <Typography variant='h6' className='mt-6'>
        SOA ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ (Exclusions)
      </Typography>
      {boundary.exclusions.map((exc, index) => (
        <Grid container spacing={2} key={index} alignItems='center' className='mt-2'>
          <Grid item xs={5}>
            <FormControl fullWidth>
              <InputLabel>SOA</InputLabel>
              <Select
                value={soaOptions.find(soa => soa.soaId === exc.soa) ? exc.soa : ''}
                onChange={e => handleChange('soa', e.target.value, index, 'exclusions')}
              >
                {soaOptions.map(soa => (
                  <MenuItem key={soa.soaId} value={soa.soaId}>
                    {soa.controlId} {soa.controlName}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={5}>
            <TextField
              fullWidth
              label='‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ'
              value={exc.description || ''}
              onChange={e => handleChange('description', e.target.value, index, 'exclusions')}
            />
          </Grid>
          <Grid item xs={2}>
            <IconButton
              onClick={() => {
                console.log('Removing exclusions at index:', index)
                handleRemove('exclusions', index)
              }}
              color='error'
            >
              <RemoveCircleOutline />
            </IconButton>
          </Grid>
        </Grid>
      ))}
      <Button startIcon={<AddCircleOutline />} onClick={() => handleAdd('exclusions')} className='mt-2'>
        ‡πÄ‡∏û‡∏¥‡πà‡∏° Exclusion
      </Button>

      {/* üîπ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
      <Typography variant='h6' className='mt-6'>
        ‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å SOA (BesidesSOA)
      </Typography>
      <TextField
        fullWidth
        multiline
        rows={3}
        label='‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'
        value={boundary.besidesSOA}
        onChange={e => handleChange('besidesSOA', e.target.value)}
      />

      {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
      <Button variant='contained' color='primary' className='mt-6' fullWidth onClick={handleSave}>
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Boundary
      </Button>
    </Box>
  )
}
